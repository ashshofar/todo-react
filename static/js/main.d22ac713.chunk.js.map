{"version":3,"sources":["TodoItem.js","serviceWorker.js","index.js","App.js"],"names":["TodoItem","createTasks","item","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","key","type","checked","onChange","_this","props","changeItem","edit","value","text","name","e","updateItem","target","onBlur","onDoubleClick","editItem","onClick","deleteItem","listItems","this","entries","map","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","react_default","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","state","items","currentItem","active","total","handleChange","Date","now","setState","addItem","preventDefault","newItem","Object","D_react_todo_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__","concat","tempTotal","sessionStorage","setItem","JSON","stringify","filteredItems","filter","countActive","finalValue","updatedItems","D_react_todo_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","myData","getItem","parse","tempActive","react__WEBPACK_IMPORTED_MODULE_7___default","onSubmit","_TodoItem__WEBPACK_IMPORTED_MODULE_9__","hot","module"],"mappings":"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","file":"static/js/main.d22ac713.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\n\r\nclass TodoItem extends Component {\r\n    createTasks = item => {\r\n        return <li key={item.key}>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        checked= {item.checked}\r\n                        onChange= { () => this.props.changeItem(item.checked, item.key) } \r\n                    />\r\n                    { item.edit ? (\r\n                        <input\r\n                            value = {item.text} \r\n                            name = \"tempData\"\r\n                            onChange = { (e) => this.props.updateItem({key: item.key, text: e.target.value}) }\r\n                            onBlur = { (e) => this.props.updateItem({key: item.key, edit: false}) }\r\n                        />\r\n                    ) : (\r\n                        <span onDoubleClick = { () => this.props.editItem(item.key)} >{item.text}</span>\r\n                    )\r\n                    }\r\n                    <button onClick = { () => this.props.deleteItem(item.key) }>Delete</button> \r\n                </li>\r\n    }\r\n    render() {\r\n        const todoEntries = this.props.entries\r\n        const listItems = todoEntries.map(this.createTasks)\r\n\r\n        return <ul className=\"theList\">{listItems}</ul>\r\n    }\r\n}\r\n\r\nexport default TodoItem","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport TodoItem from './TodoItem';\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    let myData = sessionStorage.getItem('myData')\r\n\r\n    if(myData) {\r\n      this.setState({\r\n        items: JSON.parse(myData)\r\n      })\r\n    }\r\n        \r\n  }\r\n  \r\n  state = {\r\n    name: \"Test\",\r\n    items: [],\r\n    currentItem: {text: '', key: '', 'checked': 0, 'edit': false},\r\n    active: 0,\r\n    total: 0\r\n  }\r\n\r\n  handleChange = e => {\r\n    const itemText = e.target.value\r\n    const currentItem = { text: itemText, key: Date.now(), checked: 0, 'edit': false}\r\n    this.setState({\r\n      currentItem,\r\n    })\r\n  }\r\n\r\n  addItem = (e) => {\r\n    e.preventDefault();\r\n    const newItem = this.state.currentItem\r\n\r\n    if(newItem.text !== ''){\r\n      const items = [...this.state.items, newItem]\r\n      let tempTotal = this.state.total + 1;\r\n      this.setState({\r\n        items: items,\r\n        total: tempTotal,\r\n        currentItem: {text: '', key: '', checked: 0, 'edit': false}\r\n      })\r\n\r\n      sessionStorage.setItem('myData', JSON.stringify(items))\r\n    }\r\n  }\r\n\r\n  deleteItem = key => {\r\n    const filteredItems = this.state.items.filter(item => {\r\n\r\n      if(item.key === key) {\r\n        if(item.checked === 1) {\r\n          this.countActive(0)\r\n        }\r\n      }\r\n\r\n      return item.key !== key\r\n    })\r\n\r\n    let tempTotal = this.state.total - 1\r\n\r\n    this.setState({\r\n      items: filteredItems,\r\n      total: tempTotal\r\n    })\r\n\r\n    sessionStorage.setItem('myData', JSON.stringify(filteredItems))\r\n  }\r\n\r\n  changeItem = (value, key) => {\r\n    const finalValue = value === 1 ? 0 : 1;\r\n\r\n    this.countActive(finalValue)\r\n\r\n    const updatedItems = this.state.items.filter(item => {\r\n      if(item.key === key) {\r\n        item.checked = finalValue\r\n      }\r\n\r\n      return item\r\n    })\r\n\r\n    this.setState({\r\n      items: updatedItems,\r\n    })\r\n\r\n    sessionStorage.setItem('myData', JSON.stringify(updatedItems))\r\n\r\n  }\r\n\r\n  editItem = (key) => {\r\n    const updatedItems = this.state.items.filter(item => {\r\n      if(item.key === key) {\r\n        item.edit = true\r\n      }\r\n\r\n      return item\r\n    })\r\n\r\n    this.setState({\r\n      items: updatedItems,\r\n    })\r\n  }\r\n\r\n  updateItem = (e) => {\r\n    \r\n    this.setState( (state) => ({\r\n      items:state.items.map( (item) => item.key === e.key ? {...item, ...e} : item )\r\n    }) )\r\n\r\n    sessionStorage.setItem('myData', JSON.stringify(this.state.items))\r\n  }\r\n\r\n  countActive (value) {\r\n\r\n    let tempActive = this.state.active\r\n\r\n    if(value === 0) {\r\n      tempActive -= 1 \r\n    } else {\r\n      tempActive += 1 \r\n    }\r\n\r\n    this.setState({\r\n      active: tempActive\r\n    }) \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div>\r\n          Complete : {this.state.active}\r\n        </div>\r\n        <div>\r\n          Active : {this.state.total}\r\n        </div>\r\n        <form onSubmit={this.addItem}>\r\n          <input\r\n            value = {this.state.currentItem.text} \r\n            onChange = {this.handleChange}\r\n            name = \"currentItem\"\r\n          />\r\n\r\n          <input\r\n            type = \"submit\"\r\n            value = \"Kirim\"\r\n          />\r\n\r\n        </form>\r\n\r\n        <TodoItem \r\n          entries={this.state.items}\r\n          deleteItem={this.deleteItem}\r\n          changeItem={this.changeItem}\r\n          editItem={this.editItem}\r\n          updateItem={this.updateItem}\r\n        />\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default hot(module)(App)\r\n"],"sourceRoot":""}